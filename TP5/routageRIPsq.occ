
#USE "course.lib"

VAL INT infini IS 16:

VAL INT maxVois IS 3:

--definition du type INFOROUTE pour les table de routage
DATA TYPE INFOROUTE
  RECORD
    INT indVois:
    INT cout:
: 

DATA TYPE TABROUTE IS [7] INFOROUTE:

  
--definition de la procedure pour le multiplexage de l'impression
--affiche la table de routage d'un noeud 
PROC ringScreen([] CHAN OF  TABROUTE theirScreens, CHAN OF BYTE screen)
  TABROUTE table:
  SEQ
    WHILE TRUE
      ALT i=0 FOR SIZE theirScreens
        theirScreens[i] ? table
          SEQ
            out.string ("table du routeur :", 10, screen)
            out.number (i, 2, screen)
            screen ! '*n'
            SEQ j=0 FOR 7
              SEQ
                out.string ("destination :",15, screen)
                out.number (j, 2, screen)
                screen ! '*n'    
                out.string ("Port de sortie:",13, screen)
                out.number (table[j][indVois], 2, screen)
                screen ! '*n'
                out.string ("cout :",10, screen)
                IF 
                  table[j][cout] = infini
                    out.string ("infini",9, screen)
                  TRUE
                    out.number (table[j][cout], 2, screen)
                screen ! '*n'
:    
  
--procedure définissant un routeur
PROC routeur (VAL INT id, [] CHAN OF TABROUTE in, [] CHAN OF TABROUTE out,CHAN OF TABROUTE screenOut )
  TABROUTE tableLoc:
  [maxVois] TABROUTE tableVois:
  SEQ
    SEQ i=0 FOR SIZE tableLoc
      IF
        i = id
          tableLoc[i][cout] := 0
        TRUE
          tableLoc[i][cout] := 16
    
    WHILE TRUE
      SEQ
        --communications
        --changement d'etat de la table locale
        --affichage de la table locale
        screenOut ! tableLoc
: 

--procedure pour la definition d'un reseau (avec exemple de codage incomplet)
PROC reseau(CHAN OF BYTE keyboard,screen,error)
  [7]CHAN OF TABROUTE dummyScreen:
  [18]CHAN OF TABROUTE lien: --la taille du tableau (nombre de liens) dépend de la topologie
  --exemple de codage pour connecter les noeuds
  r0Out IS [lien[0], lien[1], lien[2]]:
  r1Out IS [lien[10], lien[6]]:
  r2Out IS [lien[4], lien[5], lien[11]]:
  r3Out IS [lien[8], lien[9], lien[7]]:          
  r4Out IS [lien[13], lien[14], lien[3]]:
  r5Out IS [lien[12], lien[15]]:
  r6Out IS [lien[16], lien[17]]:

  r0In IS [lien[10], lien[11], lien[12]]:
  r1In IS [lien[0], lien[5]]:
  r2In IS [lien[7], lien[6], lien[1]]:
  r3In IS [lien[3], lien[17], lien[4]]:
  r4In IS [lien[15], lien[16], lien[8]]:
  r5In IS [lien[2], lien[13]]:
  r6In IS [lien[14], lien[9]]:
  
  PAR
    ringScreen(dummyScreen,screen)
    routeur(0,r0In,r0Out,dummyScreen[0])
    routeur(1,r1In,r1Out,dummyScreen[1])
    routeur(2,r2In,r2Out,dummyScreen[2])
    routeur(3,r3In,r3Out,dummyScreen[3])
    routeur(4,r4In,r4Out,dummyScreen[4])
    routeur(5,r5In,r5Out,dummyScreen[5])
    routeur(6,r6In,r6Out,dummyScreen[6])
    
: